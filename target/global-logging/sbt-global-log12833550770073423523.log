[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\r.kaczynski\AppData\Local\Temp\idea2.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\r.kaczynski\AppData\Local\Temp\idea2.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.2 (Eclipse Adoptium Java 11.0.14.1)
[debug]       Load.loadUnit: plugins took 429.0634ms
[debug]       Load.loadUnit: defsScala took 1.4383ms
[debug] [Loading] Scanning directory C:\Users\r.kaczynski\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\r.kaczynski\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 89.0496 ms
[debug]           Load.resolveProject(global-plugins) took 112.0754ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\r.kaczynski\.sbt\1.0\plugins, plugins: List(<none>))) took 307.7141ms
[debug] [Loading] Done in C:\Users\r.kaczynski\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 380.0992ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.441ms
[debug]     Load.loadUnit(file:/C:/Users/r.kaczynski/.sbt/1.0/plugins/, ...) took 836.349ms
[debug]   Load.apply: load took 1233.7684ms
[debug]   Load.apply: resolveProjects took 22.682ms
[debug]   Load.apply: finalTransforms took 210.3142ms
[debug]   Load.apply: config.delegates took 21.0588ms
[debug]   Load.apply: Def.make(settings)... took 1511.0478ms
[debug]   Load.apply: structureIndex took 409.2462ms
[debug]   Load.apply: mkStreams took 3.6651ms
[info] loading global plugins from C:\Users\r.kaczynski\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 8071.8792ms
[debug]           Load.loadUnit: plugins took 123.1495ms
[debug]           Load.loadUnit: defsScala took 0.032ms
[debug] [Loading] Scanning directory C:\academy-projects\kafka-word-count\project
[debug]             Load.loadUnit: mkEval took 28.0985ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\academy-projects\kafka-word-count\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 8.0683 ms
[info] loading settings for project kafka-word-count-build from idea2.sbt ...
[debug]               Load.resolveProject(kafka-word-count-build) took 7.7627ms
[debug]             Load.loadTransitive: finalizeProject(Project(id kafka-word-count-build, base: C:\academy-projects\kafka-word-count\project, plugins: List(<none>))) took 17.6951ms
[debug] [Loading] Done in C:\academy-projects\kafka-word-count\project, returning: (kafka-word-count-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 10493.6203ms
[debug]           Load.loadUnit: cleanEvalClasses took 10.8913ms
[debug]         Load.loadUnit(file:/C:/academy-projects/kafka-word-count/project/, ...) took 10630.5563ms
[debug]       Load.apply: load took 10634.3074ms
[debug]       Load.apply: resolveProjects took 0.6769ms
[debug]       Load.apply: finalTransforms took 33.6008ms
[debug]       Load.apply: config.delegates took 1.9653ms
[debug]       Load.apply: Def.make(settings)... took 226.2439ms
[debug]       Load.apply: structureIndex took 156.6428ms
[debug]       Load.apply: mkStreams took 0.0032ms
[info] loading project definition from C:\academy-projects\kafka-word-count\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 22877.8855ms
[debug]     Load.loadUnit: defsScala took 0.0039ms
[debug] [Loading] Scanning directory C:\academy-projects\kafka-word-count
[debug]       Load.loadUnit: mkEval took 0.6571ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 8.2011 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 86.8544ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\academy-projects\kafka-word-count, plugins: List(<none>))) took 100.1188ms
[debug] [Loading] Done in C:\academy-projects\kafka-word-count, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 4752.0772ms
[debug]     Load.loadUnit: cleanEvalClasses took 59.4105ms
[debug]   Load.loadUnit(file:/C:/academy-projects/kafka-word-count/, ...) took 27691.8439ms
[debug] Load.apply: load took 27695.1487ms
[debug] Load.apply: resolveProjects took 0.2275ms
[debug] Load.apply: finalTransforms took 71.4169ms
[debug] Load.apply: config.delegates took 0.5286ms
[debug] Load.apply: Def.make(settings)... took 257.6761ms
[debug] Load.apply: structureIndex took 54.0325ms
[debug] Load.apply: mkStreams took 0.0029ms
[info] set current project to kafka-word-count (in build file:/C:/academy-projects/kafka-word-count/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 60083 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 60083, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to kafka-word-count (in build file:/C:/academy-projects/kafka-word-count/)
[debug] > Exec(idea-shell, None, None)
